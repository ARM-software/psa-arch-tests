///** @file
// * Copyright (c) 2019, Arm Limited or its affiliates. All rights reserved.
// * SPDX-License-Identifier : Apache-2.0
// *
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// *
// *  http://www.apache.org/licenses/LICENSE-2.0
// *
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
//**/

// UART device info
// In this implementation we don't assume there's a UART device, we just print
// to stdout, so the values below don't mean much.
uart.num=1;
uart.0.base = 0x00000000;
uart.0.size = 0x0;
uart.0.intr_id = 0x0;
uart.0.permission = TYPE_READ_WRITE;

// Watchdog device info
// In this implementation we don't assume there's a watchdog. Watchdog PAL
// functions all just return SUCCESS, so the values below don't mean much.
watchdog.num = 1;
watchdog.0.base = 0x0;
watchdog.0.size = 0x0;
watchdog.0.intr_id = 0x0;
watchdog.0.permission = TYPE_READ_WRITE;
watchdog.0.num_of_tick_per_micro_sec = 0x0;
watchdog.0.timeout_in_micro_sec_low = 0x0;
watchdog.0.timeout_in_micro_sec_medium = 0x0;
watchdog.0.timeout_in_micro_sec_high = 0x0;
watchdog.0.timeout_in_micro_sec_crypto = 0x0;

// In this implementation we don't actually use NV memory - we don't support
// tests that require process or system restarts so NV memory isn't required.
// The implementation just uses an array in memory.
nvmem.num =1;
nvmem.0.start = 0x0;
nvmem.0.end = 0x400; // 1KiB
nvmem.0.permission = TYPE_READ_WRITE;

// Miscellaneous - Test scatter info
dut.num = 1;

// Start address of 12KB NS memory for test ELF
dut.0.ns_test_addr = 0x2007F000;

// Start address of combine_test_binary in memory. Memory can be main memory or secondary memory.
// Size of combine_test_binary = Summation of size of each test ELF file.
dut.0.ns_start_addr_of_combine_test_binary = 0x2003F000;

// Is combine_test_binary available in RAM?
dut.0.combine_test_binary_in_ram = AVAILABLE;

// Level of Isolation
dut.0.implemented_psa_firmware_isolation_level = LEVEL1;
