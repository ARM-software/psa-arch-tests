/** @file
 * Copyright (c) 2019, Arm Limited or its affiliates. All rights reserved.
 * SPDX-License-Identifier : Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
**/


/*
    DPM debugger script

    SEQ_TEST_END            0
    SEQ_OPEN_STATE_READ     1
    SEQ_OPEN_STATE_WRITE    2
    SEQ_CLOSED_STATE_READ   3
    SEQ_CLOSED_STATE_WRITE  4
    SEQ_LOCKED_STATE_READ   5
    SEQ_NEXT_TEST           6
    
    
*/



FUNC void f1 (void)
{
    unsigned int flagAddr;
    unsigned int dataAddr;
    int flag_register;
    int data;
    int run_status;
    int output;
    int addr;
    int debug;
    unsigned int debugAddr; 
    int i;    

/* #defines for sequences to be executed */
    int SEQ_OPEN_STATE_READ;
    int SEQ_OPEN_STATE_WRITE;
    int SEQ_CLOSED_STATE_READ;
    int SEQ_CLOSED_STATE_WRITE;
    int SEQ_LOCKED_STATE_READ;
//#SEQ_LOCKED_STATE_WRITE = 0x60
    int SEQ_NEXT_TEST;
    int SEQ_TEST_END;

//#defines for indicating signature to PE
    unsigned int DBG_INIT_SIGNATURE;
    unsigned int DBG_NEXT_SIGNATURE;

//#defines for status handshake between core and debugger
    int DBG_FLAG_TXFULL;
    int DBG_FLAG_RXFULL;
    int DBG_FLAG_READY;

/* #defines for sequences to be executed */
    SEQ_OPEN_STATE_READ=0x10;
    SEQ_OPEN_STATE_WRITE=0x20;
    SEQ_CLOSED_STATE_READ=0x30;
    SEQ_CLOSED_STATE_WRITE=0x40;
    SEQ_LOCKED_STATE_READ=0x50;
//#SEQ_LOCKED_STATE_WRITE = 0x60
    SEQ_NEXT_TEST = 0xE0;
    SEQ_TEST_END = 0xF0;

//#defines for indicating signature to PE
    DBG_INIT_SIGNATURE = 0xDEED007;
    DBG_NEXT_SIGNATURE = 0xDEED008;

//#defines for status handshake between core and debugger
    DBG_FLAG_TXFULL = 0x1;
    DBG_FLAG_RXFULL = 0x2;
    DBG_FLAG_READY = 0x4;

    flagAddr = 0x30017FF0;//flagAddr = &gFlag;
    dataAddr = 0x30017FF4;//dataAddr = &gData;

    printf("0x%08x 0x%08x\n", flagAddr, dataAddr);
         
    _WDWORD(dataAddr,DBG_INIT_SIGNATURE);  
    _WDWORD(flagAddr,DBG_FLAG_READY);    
    printf("0x%08x 0x%08x\n", _RDWORD(flagAddr), _RDWORD(dataAddr));

    _break_ = 0;
    
    run_status = 0;
    while(run_status != SEQ_TEST_END)
    {       
        flag_register = _RDWORD(flagAddr);
        run_status = flag_register & 0xf0;

        if((flag_register & 0xff) == 0x0)      
        {
            _WDWORD(flagAddr,DBG_FLAG_READY);            
            _sleep_(100);
            _break_=0;
            exec("g");
            continue;
        }

				if(run_status == SEQ_OPEN_STATE_READ)
				{      
						//printf("SEQ_OPEN_STATE_READ : 0x%x\n", _RDWORD(flagAddr));
						_WDWORD(flagAddr,0);        
						data = _RDWORD(dataAddr);              
						output = _RDWORD(data);      
						_WDWORD(dataAddr,output);
						_WDWORD(flagAddr,DBG_FLAG_READY|DBG_FLAG_RXFULL);

						_sleep_(10);
						_break_=0;   
						//printf("SEQ_OPEN_STATE_READ is finished\n");
						exec("g");   
				}
				else if(run_status == SEQ_OPEN_STATE_WRITE)
				{  
						//printf("SEQ_OPEN_STATE_WRITE : 0x%x\n", _RDWORD(flagAddr));
						_WDWORD(flagAddr,0);
						addr = _RDWORD(dataAddr);
						_WDWORD(flagAddr,DBG_FLAG_READY|DBG_FLAG_RXFULL);

						_sleep_(10);
						_break_ = 0;
						exec("g");

						//while(!_break_);
						while((_RDWORD(flagAddr) & DBG_FLAG_TXFULL) == 0x0);

						_WDWORD(flagAddr,0);
						data = _RDWORD(dataAddr);
						_WDWORD(addr, data);
						_WDWORD(flagAddr,DBG_FLAG_READY|DBG_FLAG_RXFULL);        

						_sleep_(10);
						_break_=0;
						//printf("SEQ_OPEN_STATE_WRITE is finished\n");
						exec("g");
				}
				else if(run_status == SEQ_CLOSED_STATE_READ)
				{    
						//printf("SEQ_CLOSED_STATE_READ : 0x%x\n", _RDWORD(flagAddr));
					  // DPM in OPEN state
						_WDWORD(flagAddr,0);        
						data = _RDWORD(dataAddr);
						printf("SEQ_CLOSED_STATE_READ = %X\n", data);
						_WDWORD(flagAddr, DBG_FLAG_READY);

						_sleep_(10);
						_break_=0;
						exec("g");
					
						// DPM shall move to CLOSED state
						while((_RDWORD(flagAddr) & 0xf0) != SEQ_CLOSED_STATE_READ);
						_WDWORD(flagAddr, 0);
						output = _RDWORD(data);
						printf("SEQ_CLOSED_STATE_READ = %X\n", output);
					
						_WDWORD(dataAddr,output);
						printf("SEQ_CLOSED_STATE_READ = %X\n", _RDWORD(dataAddr));
						_WDWORD(flagAddr,DBG_FLAG_READY|DBG_FLAG_RXFULL);         
						
						_sleep_(10);
						_break_=0;
						printf("SEQ_CLOSED_STATE_READ finished\n");
						exec("g");
						
				}
				//# Add the code : check if still getting DAP error, to ensure that read access happened in closed state
				else if(run_status == SEQ_CLOSED_STATE_WRITE)
				{
						//printf("SEQ_CLOSED_STATE_WRITE : 0x%x\n", _RDWORD(flagAddr));						
						_WDWORD(flagAddr,0);
						addr = _RDWORD(dataAddr);
						_WDWORD(flagAddr,DBG_FLAG_READY|DBG_FLAG_RXFULL);         
					
						_sleep_(10);
						_break_=0;
						exec("g");
     
						while((_RDWORD(flagAddr) & DBG_FLAG_TXFULL) == 0x0);
					
						_WDWORD(flagAddr,0);        
						data = _RDWORD(dataAddr);        
						_WDWORD(addr, data);      
						_WDWORD(flagAddr,DBG_FLAG_READY|DBG_FLAG_RXFULL);          

						_sleep_(10);
						_break_=0;
						//printf("SEQ_CLOSED_STATE_WRITE finished\n");					
						exec("g");
				}
				//# Add the code : check if still getting DAP error, to ensure that read access happened in closed state
				else if(run_status == SEQ_LOCKED_STATE_READ)
				{
						_WDWORD(flagAddr,0);        
						data = _RDWORD(dataAddr);
						_WDWORD(flagAddr,DBG_FLAG_READY|DBG_FLAG_RXFULL);   
        
						_sleep_(10);
						_break_=0;
						exec("g");
        
						//# Add the code : wait for DAP error
						//output = ec.getMemoryService().readMemory32(data) # this read must happen while still getting DAP error.
						output = _RDWORD(data);
        
						//# Add the code : check if still getting DAP error, to ensure that read access happened in closed state
						while(!_break_);
        
						_WDWORD(flagAddr,0);        
						_WDWORD(dataAddr,output);         
        
						//#Set flag register appropriately so that CPU can proceed.
						_WDWORD(flagAddr,DBG_FLAG_READY|DBG_FLAG_RXFULL);  
        
						_sleep_(10);
						_break_=0;
						exec("g");
				}
				//# This seq is to indicate to proceed to next test.
				else if(run_status == SEQ_NEXT_TEST)
				{
						_WDWORD(dataAddr,DBG_NEXT_SIGNATURE);      
						printf("SEQ_NEXT_TEST dataAddr = %x", _RDWORD(dataAddr));
						printf("proceed to next debug test\n");        
						_WDWORD(flagAddr,DBG_FLAG_READY);           

						_sleep_(100);
						_break_=0;     
						exec("g");
				}
		}
    printf("Debugger script Done!\n");
}


g,main

bs WRITE 0x30017FF0, 1, "_break_=1"
_sleep_(1000)
g

f1()

